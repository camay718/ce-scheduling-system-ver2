/*
 * 業務配置調整システム：個人タイムライン（バー表示）& 週間PDF一括出力
 * -------------------------------------------------------------
 * ✅ このファイルはそのまま読み込める drop-in 実装です。
 *   1) 本ファイルの <SCRIPT> 部分を既存プロジェクトに追加
 *   2) 下部の <CSS> をスタイルシートへ追加
 *   3) 既存の renderWeeklyPersonalTimeline を renderWeeklyPersonalTimelineWithBars に置換
 *   4) hospitalStore の構造（staff, assignments, dailyBusinesses, colorMap, currentWeek）に依存
 *
 * 期待する hospitalStore 例：
 *   hospitalStore = {
 *     staff: [{ id: 's001', name: '山田', baseCategory: 'ME', color: '#7C3AED' }, ...],
 *     // 曜日キー: 'Mon' | 'Tue' | 'Wed' | 'Thu' | 'Fri'
 *     assignments: { Mon: { businessId1: ['s001','s002'], ... }, ... },
 *     dailyBusinesses: { Mon: [{ id:'businessId1', title:'手術室A', category:'HD', startTime:'08:30', endTime:'12:00' }, ...], ... },
 *     colorMap: { HD:'#FF69B4', FLEX:'#FFD700', /* 他カテゴリ色 */ },
 *     currentWeek: { startISO: '2025-08-18' } // 週の月曜ISO日付（YYYY-MM-DD）
 *   }
 *
 * 重要：HD=ピンク(#FF69B4), FLEX=ゴールド(#FFD700) は厳守
 */

// =========================
// タイムライン基本設定
// =========================
const TIMELINE_CONFIG = {
  startHour: 8,      // 8:00
  endHour: 17,       // 17:00
  totalHours: 9,     // 9時間
  laneHeight: 30,    // 各段の高さ（px）
  barHeight: 26,     // バーの高さ（px）
  padding: 4         // セル内の上下左右余白
};

// -------------------------
// ユーティリティ
// -------------------------
function timeToMinutes(timeStr) {
  const [h, m] = String(timeStr).split(':').map(Number);
  return h * 60 + (m || 0);
}

function timeToPercent(timeStr) {
  const minutes = timeToMinutes(timeStr);
  const start = TIMELINE_CONFIG.startHour * 60;
  const total = TIMELINE_CONFIG.totalHours * 60;
  return ((minutes - start) / total) * 100;
}

function clampPercent(p) {
  if (Number.isNaN(p)) return 0;
  return Math.max(0, Math.min(100, p));
}

function getReadableTextColor(bg) {
  // 相対輝度に基づく簡易コントラスト（WCAG近似）
  try {
    const hex = bg.replace('#','');
    const r = parseInt(hex.substring(0,2),16)/255;
    const g = parseInt(hex.substring(2,4),16)/255;
    const b = parseInt(hex.substring(4,6),16)/255;
    const Rs = (r <= 0.03928) ? r/12.92 : Math.pow((r+0.055)/1.055, 2.4);
    const Gs = (g <= 0.03928) ? g/12.92 : Math.pow((g+0.055)/1.055, 2.4);
    const Bs = (b <= 0.03928) ? b/12.92 : Math.pow((b+0.055)/1.055, 2.4);
    const L = 0.2126*Rs + 0.7152*Gs + 0.0722*Bs;
    return L > 0.54 ? '#111' : '#fff';
  } catch(e) {
    return '#fff';
  }
}

function getDayDisplayName(dayKey) {
  return ({ Mon:'月', Tue:'火', Wed:'水', Thu:'木', Fri:'金' })[dayKey] || dayKey;
}

function isoToDate(iso) {
  const [y,m,d] = iso.split('-').map(Number);
  return new Date(y, m-1, d);
}

function formatDate(d) {
  return d.toLocaleDateString('ja-JP', { year:'numeric', month:'2-digit', day:'2-digit' }).replaceAll('/','-');
}

function getWeekStartDate() {
  if (window.hospitalStore?.currentWeek?.startISO) return isoToDate(hospitalStore.currentWeek.startISO);
  // フォールバック：直近の月曜日
  const now = new Date();
  const dow = now.getDay(); // 0:日 1:月 ... 6:土
  const diffToMon = (dow + 6) % 7; // 月=0
  const mon = new Date(now);
  mon.setDate(now.getDate() - diffToMon);
  mon.setHours(0,0,0,0);
  return mon;
}

function getWeekEndDate() {
  const start = getWeekStartDate();
  const end = new Date(start);
  end.setDate(start.getDate() + 4); // 金曜日
  return end;
}

// 状態表示（非番・休暇・出張 など）
function getStaffDayStatus(staffId, dayKey) {
  // プロジェクトの実データ仕様に合わせて拡張
  // 例：hospitalStore.status[dayKey]?.[staffId] に 'offDuty' | 'annualLeave' | 'businessTrip' | 'available'
  return window.hospitalStore?.status?.[dayKey]?.[staffId] || 'available';
}

function getStatusOverlayStyle(status) {
  switch (status) {
    case 'offDuty':
      return 'repeating-linear-gradient(45deg, rgba(108,117,125,0.8), rgba(108,117,125,0.8) 10px, rgba(90,98,104,0.8) 10px, rgba(90,98,104,0.8) 20px)';
    case 'annualLeave':
      return 'repeating-linear-gradient(45deg, rgba(40,167,69,0.8), rgba(40,167,69,0.8) 10px, rgba(30,126,52,0.8) 10px, rgba(30,126,52,0.8) 20px)';
    case 'businessTrip':
      return 'repeating-linear-gradient(45deg, rgba(0,123,255,0.8), rgba(0,123,255,0.8) 10px, rgba(0,86,179,0.8) 10px, rgba(0,86,179,0.8) 20px)';
    default:
      return 'transparent';
  }
}

function getStatusDisplayName(status) {
  return ({ offDuty:'非番', annualLeave:'休暇', businessTrip:'出張' })[status] || '';
}

// クリックで編集
function editBusinessFromTimeline(businessId, dayKey) {
  if (typeof window.openBusinessEditor === 'function') {
    window.openBusinessEditor({ businessId, day: dayKey });
  } else {
    console.warn('openBusinessEditor が未定義です');
  }
}

function showMessage(msg, type='info') {
  // 任意のトースト/UIへ接続
  console[type === 'error' ? 'error' : 'log'](`[${type}] ${msg}`);
}

// -------------------------
// レーン割当 & バー生成
// -------------------------
function buildStaffDayBars(staffId, dayKey) {
  const dayAssignments = (window.hospitalStore?.assignments?.[dayKey]) || {};
  const businessesInDay = (window.hospitalStore?.dailyBusinesses?.[dayKey]) || [];
  const items = [];

  for (const [businessId, assignedStaffIds] of Object.entries(dayAssignments)) {
    if (Array.isArray(assignedStaffIds) && assignedStaffIds.includes(staffId)) {
      const b = businessesInDay.find(x => x.id === businessId);
      if (!b) continue;
      const startM = timeToMinutes(b.startTime);
      const endM = timeToMinutes(b.endTime);
      const inRange = endM > TIMELINE_CONFIG.startHour * 60 && startM < TIMELINE_CONFIG.endHour * 60;
      if (!inRange) continue;
      items.push({
        businessId,
        title: b.title,
        category: b.category,
        startTime: b.startTime,
        endTime: b.endTime,
        startMinutes: startM,
        endMinutes: endM
      });
    }
  }

  // 開始時間でソート
  items.sort((a,b) => a.startMinutes - b.startMinutes);

  // レーン割当（区間スケジューリング）
  const lanes = []; // 各レーンの最終終了時刻（分）
  for (const it of items) {
    let lane = -1;
    for (let i=0; i<lanes.length; i++) {
      if (it.startMinutes >= lanes[i]) { lane = i; break; }
    }
    if (lane === -1) { lane = lanes.length; lanes.push(0); }
    lanes[lane] = Math.max(lanes[lane], it.endMinutes);
    it.lane = lane;
  }

  return { items, maxLanes: lanes.length };
}

// -------------------------
// セル描画
// -------------------------
function renderStaffDayTimeline(staffId, dayKey) {
  const { items, maxLanes } = buildStaffDayBars(staffId, dayKey);
  const cellHeight = Math.max(60, maxLanes * TIMELINE_CONFIG.laneHeight + TIMELINE_CONFIG.padding * 2);

  const barsHTML = items.map(item => {
    const left = clampPercent(timeToPercent(item.startTime));
    const right = clampPercent(timeToPercent(item.endTime));
    const width = Math.max(0, right - left);
    const top = TIMELINE_CONFIG.padding + (item.lane * TIMELINE_CONFIG.laneHeight);

    const bg = (window.hospitalStore?.colorMap?.[item.category]) || '#6c757d';
    const color = getReadableTextColor(bg);

    return `
      <div class="timeline-business-bar"
           style="position:absolute;left:${left}%;width:${width}%;top:${top}px;height:${TIMELINE_CONFIG.barHeight}px;background-color:${bg};color:${color};border-radius:6px;padding:2px 6px;font-size:12px;font-weight:600;display:flex;align-items:center;justify-content:center;box-shadow:0 2px 4px rgba(0,0,0,0.15);cursor:pointer;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;"
           title="${item.title} (${item.startTime}-${item.endTime})"
           onclick="editBusinessFromTimeline('${item.businessId}','${dayKey}')"
           aria-label="${item.title} ${item.startTime} から ${item.endTime}">
        ${item.title}
      </div>`;
  }).join('');

  const status = getStaffDayStatus(staffId, dayKey);
  const statusOverlay = (status && status !== 'available') ? `
    <div class="status-overlay status-${status}"
         style="position:absolute;inset:0;background:${getStatusOverlayStyle(status)};display:flex;align-items:center;justify-content:center;font-weight:700;color:white;z-index:10;">
      ${getStatusDisplayName(status)}
    </div>` : '';

  const isAltBg = (dayKey === 'Tue' || dayKey === 'Thu');
  return `
    <div class="day-timeline-cell" style="position:relative;height:${cellHeight}px;border-right:2px solid #dee2e6;background:${isAltBg ? '#fafbfc' : 'white'};overflow:hidden;">
      ${barsHTML}
      ${statusOverlay}
    </div>`;
}

// -------------------------
// 週間全体描画
// -------------------------
function renderWeeklyPersonalTimelineWithBars() {
  const days = ['Mon','Tue','Wed','Thu','Fri'];
  const headerTimeMarks = Array.from({ length: 10 }, (_, i) => {
    const t = (8 + i).toString().padStart(2,'0') + ':00';
    const left = (i / 9) * 100;
    return `<div class=\"time-mark\" style=\"left:${left}%\">${t}</div>`;
  }).join('');

  const staffRows = (window.hospitalStore?.staff || []).map(staff => {
    const infoCell = `
      <div class=\"staff-info-cell\" role=\"rowheader\" aria-label=\"${staff.name}\">
        <div class=\"staff-avatar\" style=\"background-color:${staff.color}\">${(staff.name||'').charAt(0)}</div>
        <div class=\"staff-details\">
          <div class=\"staff-name\">${staff.name}</div>
          <div class=\"staff-category\">${staff.baseCategory || ''}</div>
        </div>
      </div>`;
    const dayCells = days.map(dk => renderStaffDayTimeline(staff.id, dk)).join('');
    return `<div class=\"staff-timeline-row\">${infoCell}${dayCells}</div>`;
  }).join('');

  const html = `
    <div class=\"weekly-personal-timeline\" aria-label=\"個人別週間タイムライン 8時から17時\">
      <div class=\"timeline-header\">
        <h3>👤 個人別週間タイムライン (8:00-17:00)</h3>
        <div class=\"timeline-controls\">
          <button onclick=\"exportWeeklyTimelinePDF()\" class=\"btn btn-primary\">📄 週間PDF出力</button>
          <button onclick=\"toggleTimelineView?.()\" class=\"btn btn-secondary\">🔄 表示切替</button>
        </div>
      </div>
      <div class=\"timeline-time-header\">
        <div class=\"staff-column-header\">スタッフ</div>
        ${['Mon','Tue','Wed','Thu','Fri'].map(day => `
          <div class=\"day-column-header\">
            <div class=\"day-info\">
              <div class=\"day-name\">${getDayDisplayName(day)}</div>
              <div class=\"day-date\">${formatDate(new Date(getWeekStartDate().getTime() + (['Mon','Tue','Wed','Thu','Fri'].indexOf(day))*86400000))}</div>
            </div>
            <div class=\"time-scale\">${headerTimeMarks}</div>
          </div>`).join('')}
      </div>
      <div class=\"timeline-body\">${staffRows}</div>
    </div>`;

  return html;
}

// -------------------------
// PDF 出力（html2canvas + jsPDF）
// -------------------------
async function exportWeeklyTimelinePDF() {
  const container = document.querySelector('.weekly-personal-timeline');
  if (!container) { showMessage('タイムラインが見つかりません','error'); return; }

  showMessage('PDFを生成中...','info');

  try {
    // 高解像度キャプチャ
    const canvas = await html2canvas(container, {
      scale: 2,
      useCORS: true,
      logging: false,
      scrollX: 0,
      scrollY: -window.scrollY,
      backgroundColor: '#ffffff',
      width: container.scrollWidth,
      height: container.scrollHeight
    });

    const imgData = canvas.toDataURL('image/png');
    const { jsPDF } = window.jspdf;
    const pdf = new jsPDF('landscape','mm','a3');

    const pageW = pdf.internal.pageSize.getWidth();
    const pageH = pdf.internal.pageSize.getHeight();

    const margin = 10; // 10mm
    const titleH = 15;
    const availableH = pageH - (titleH + margin*2 + 10); // 10mm = フッター領域

    const imgW = pageW - margin*2;

    // キャンバスのアスペクトに合わせて高さ計算
    const fullImgH = (canvas.height * imgW) / canvas.width;

    // タイトル
    pdf.setFontSize(16);
    pdf.setFont('helvetica','bold');
    const title = `業務配置調整システム - 週間タイムライン (${formatDate(getWeekStartDate())} ～ ${formatDate(getWeekEndDate())})`;
    pdf.text(title, pageW/2, margin + 5, { align: 'center' });

    // 複数ページへのスライス描画
    let drawnH = 0;
    let pageNum = 1;

    while (drawnH < fullImgH) {
      if (pageNum > 1) {
        pdf.addPage();
        pdf.setFontSize(16);
        pdf.setFont('helvetica','bold');
        pdf.text(title, pageW/2, margin + 5, { align: 'center' });
      }

      const sliceH = Math.min(availableH, fullImgH - drawnH);

      // 一時キャンバスでトリミング
      const tmp = document.createElement('canvas');
      const ctx = tmp.getContext('2d');
      tmp.width = canvas.width;
      tmp.height = Math.round((sliceH / fullImgH) * canvas.height);

      ctx.drawImage(
        canvas,
        0, Math.round((drawnH / fullImgH) * canvas.height),
        canvas.width, tmp.height,
        0, 0,
        canvas.width, tmp.height
      );

      const sliceData = tmp.toDataURL('image/png');
      pdf.addImage(sliceData, 'PNG', margin, margin + 10, imgW, sliceH);

      // フッター
      pdf.setFontSize(8);
      pdf.setFont('helvetica','normal');
      pdf.setTextColor(100,100,100);
      pdf.text(`出力日時: ${new Date().toLocaleString('ja-JP')}`, margin, pageH - 5);
      pdf.text(`ページ: ${pageNum}`, pageW - margin - 20, pageH - 5);

      drawnH += sliceH;
      pageNum++;
    }

    const fileName = `業務配置_週間タイムライン_${formatDate(getWeekStartDate())}_${formatDate(getWeekEndDate())}.pdf`;
    pdf.save(fileName);
    showMessage('週間タイムラインPDFを出力しました','success');
  } catch (e) {
    console.error('PDF出力エラー:', e);
    showMessage('PDF出力に失敗しました','error');
  }
}

// -------------------------
// 画面への差し替え（例）
// -------------------------
// 既存の renderWeeklyPersonalTimeline 呼出箇所を以下に置換：
// document.getElementById('personal-timeline').innerHTML = renderWeeklyPersonalTimelineWithBars();

// -------------------------
// 依存ライブラリの読み込み（HTML例）
// -------------------------
/*
  <script src="https://cdn.jsdelivr.net/npm/html2canvas@1.4.1/dist/html2canvas.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/jspdf@2.5.1/dist/jspdf.umd.min.js"></script>
*/


/* =========================
   CSS（プロジェクトのCSSへ追加）
   ========================= */
/* 週間タイムライン（バー表示対応） */
/* スクロール固定ヘッダー */
/* ---- Paste from here into your stylesheet ---- */
/* 週間タイムライン（バー表示対応） */
/* ヘッダー */
/* .weekly-personal-timeline をラッパとして利用 */

/* レイアウト */
/* grid: [スタッフ列200px] + [曜日×5] */

/* 印刷時最適化 */

/* --- 実スタイル --- */

// 以下はスタイルシート（.css）に貼り付けてください：
/*
.weekly-personal-timeline .timeline-header {
  display:flex; align-items:center; justify-content:space-between;
  padding:10px 12px; background:#f8f9fa; border:1px solid #dee2e6; border-bottom:none;
}
.weekly-personal-timeline .timeline-controls { display:flex; gap:8px; }

.timeline-time-header {
  display:grid; grid-template-columns:200px repeat(5, 1fr);
  background:#f8f9fa; border-bottom:3px solid #dee2e6; position:sticky; top:0; z-index:100;
}
.staff-column-header { padding:15px; font-weight:700; text-align:center; border-right:2px solid #dee2e6; background:#e9ecef; }
.day-column-header { border-right:2px solid #dee2e6; background:#fff; }
.day-info { text-align:center; padding:10px; background:#007bff; color:#fff; }
.time-scale { position:relative; height:25px; background:linear-gradient(to right, #f1f3f4 0%, #f1f3f4 100%); border-top:1px solid #dee2e6; }
.time-mark { position:absolute; top:2px; font-size:.7em; color:#495057; transform:translateX(-50%); background:rgba(255,255,255,0.8); padding:1px 3px; border-radius:2px; }

.staff-timeline-row { display:grid; grid-template-columns:200px repeat(5, 1fr); border-bottom:1px solid #dee2e6; }
.staff-info-cell { padding:15px; border-right:2px solid #dee2e6; display:flex; align-items:center; gap:12px; background:#f8f9fa; }
.staff-avatar { width:40px; height:40px; border-radius:50%; display:flex; align-items:center; justify-content:center; color:#fff; font-weight:700; font-size:1.1em; }
.staff-details .staff-name { font-weight:700; }
.staff-details .staff-category { font-size:.85em; color:#6c757d; }

.timeline-business-bar:hover { transform:translateY(-1px); box-shadow:0 4px 8px rgba(0,0,0,0.25) !important; z-index:20; }

/* 状態オーバーレイ */
.status-overlay.status-offDuty { background:repeating-linear-gradient(45deg, rgba(108,117,125,0.8), rgba(108,117,125,0.8) 10px, rgba(90,98,104,0.8) 10px, rgba(90,98,104,0.8) 20px) !important; }
.status-overlay.status-annualLeave { background:repeating-linear-gradient(45deg, rgba(40,167,69,0.8), rgba(40,167,69,0.8) 10px, rgba(30,126,52,0.8) 10px, rgba(30,126,52,0.8) 20px) !important; }
.status-overlay.status-businessTrip { background:repeating-linear-gradient(45deg, rgba(0,123,255,0.8), rgba(0,123,255,0.8) 10px, rgba(0,86,179,0.8) 10px, rgba(0,86,179,0.8) 20px) !important; }

/* 印刷最適化 */
@media print {
  .timeline-header, .timeline-controls { display:none !important; }
  .timeline-time-header { position:static !important; }
  .staff-avatar { -webkit-print-color-adjust: exact; print-color-adjust: exact; }
}
*/

// ---- End of CSS ----

/*
受け入れ基準 対応メモ
- バー表示／位置幅（開始・終了反映）・・・timeToPercent + clampPercent + 描画style
- 重複レーン自動配置・・・・・・・・・・buildStaffDayBars 内 lanes アルゴリズム
- バー内業務名表示・・・・・・・・・・・・renderStaffDayTimeline の innerText
- 区分色（HD=ピンク, FLEX=ゴールド）・・hospitalStore.colorMap を使用
- 非番/休暇/出張オーバーレイ・・・・・・getStaffDayStatus + getStatusOverlayStyle + CSS
- 8:00-17:00時間軸・・・・・・・・・・・・ヘッダー time-mark 生成
- 週間PDF一括（A3横/複数ページ）・・・・exportWeeklyTimelinePDF（html2canvas + jsPDF）
- ヘッダー/フッター・・・・・・・・・・・・タイトル & 出力日時/ページ数
- 既存機能維持・・・・・・・・・・・・・・本実装は描画と出力のみを置換・追加。データやD&Dロジックは既存を利用。
*/
